{"ast":null,"code":"import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport { REGISTER_SUCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR } from \"./types\";\nimport setAuthToken from \"../utils/setAuthToken\"; //LOAD User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get(\"/api/auth\");\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //Register User\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(\"/api/users\", body, config);\n    dispatch({\n      type: REGISTER_SUCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const error = err.response.data.errors;\n\n    if (error) {\n      error.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; //Login User\n\nexport const login = ({\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(\"/api/\", body, config);\n    dispatch({\n      type: REGISTER_SUCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const error = err.response.data.errors;\n\n    if (error) {\n      error.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["G:/GitRepository/MERN/React_App/client/src/actions/auth.js"],"names":["axios","setAlert","REGISTER_SUCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","error","response","errors","forEach","msg","login"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { setAlert } from \"./alert\";\r\nimport {\r\n  REGISTER_SUCESS,\r\n  REGISTER_FAIL,\r\n  USER_LOADED,\r\n  AUTH_ERROR\r\n} from \"./types\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\n\r\n//LOAD User\r\n\r\nexport const loadUser = () => async dispatch => {\r\n  if (localStorage.token) {\r\n    setAuthToken(localStorage.token);\r\n  }\r\n  try {\r\n    const res = await axios.get(\"/api/auth\");\r\n    dispatch({ type: USER_LOADED, payload: res.data });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: AUTH_ERROR\r\n    });\r\n  }\r\n};\r\n\r\n//Register User\r\n\r\nexport const register = ({ name, email, password }) => async dispatch => {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    };\r\n  \r\n    const body = JSON.stringify({ name, email, password });\r\n  \r\n    try {\r\n      const res = await axios.post(\"/api/users\", body, config);\r\n  \r\n      dispatch({\r\n        type: REGISTER_SUCESS,\r\n        payload: res.data\r\n      });\r\n    } catch (err) {\r\n      const error = err.response.data.errors;\r\n  \r\n      if (error) {\r\n        error.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\r\n      }\r\n  \r\n      dispatch({\r\n        type: REGISTER_FAIL\r\n      });\r\n    }\r\n  };\r\n\r\n//Login User\r\n\r\nexport const login = ({  email, password }) => async dispatch => {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    };\r\n  \r\n    const body = JSON.stringify({  email, password });\r\n  \r\n    try {\r\n      const res = await axios.post(\"/api/\", body, config);\r\n  \r\n      dispatch({\r\n        type: REGISTER_SUCESS,\r\n        payload: res.data\r\n      });\r\n    } catch (err) {\r\n      const error = err.response.data.errors;\r\n  \r\n      if (error) {\r\n        error.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\r\n      }\r\n  \r\n      dispatch({\r\n        type: REGISTER_FAIL\r\n      });\r\n    }\r\n  };\r\n    "]},"metadata":{},"sourceType":"module"}